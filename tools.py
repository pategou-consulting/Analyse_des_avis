import pandas as pd
from transformers import pipeline
from nltk.sentiment import SentimentIntensityAnalyzer
from gensim.corpora.dictionary import Dictionary
from gensim.models.ldamodel import LdaModel
from transformers import pipeline, AutoModelForSequenceClassification, AutoTokenizer
import nltk
import emoji

path="C:/Users/batom/models/facebook_bart_large_mnli"
nli_model = AutoModelForSequenceClassification.from_pretrained(path)    
tokenizer = AutoTokenizer.from_pretrained(path)
classifier = pipeline("zero-shot-classification", model=nli_model, tokenizer=tokenizer)

# Load the NLTK sentiment analyzer
sia = SentimentIntensityAnalyzer()

# Possible labels
candidate_labels = ["positif", "n√©gatif", "neutre"]

# Function to analyze reviews with BART
def analyze_review_bart(review):
    result = classifier(review, candidate_labels)
    return result['labels'][0], result['scores'][0]

# Function for sentiment analysis with NLTK considering emojis
def analyze_sentiment(review):
    review = emoji.demojize(review)  # Convert emojis to text
    scores = sia.polarity_scores(review)
    return scores['compound']

# Function to preprocess reviews (including emojis)
def preprocess(text):
    text = emoji.demojize(text)  # Convert emojis to text
    tokens = nltk.word_tokenize(text.lower())
    stop_words = set(nltk.corpus.stopwords.words('french'))
    tokens = [token for token in tokens if token.isalnum() and token not in stop_words]
    return tokens

# Example review data
data = {
    "review_id": [1, 2, 3, 4, 5, 6, 7, 8, 9],
    "review_text": [
        "La qualit√© du produit est excellente, je suis tr√®s satisfait üòä.",
        "La livraison a √©t√© tr√®s lente üò†, mais le produit est bon üëç.",
        "Le service client est terrible üò° et le produit est d√©fectueux üò§.",
        "Excellent service ! J'ai command√© un produit et il est arriv√© bien avant la date pr√©vue. Le suivi de commande √©tait parfait et l'emballage soign√©. Je suis vraiment satisfait de mon achat et je recommanderai sans h√©siter cette marketplace √† mes amis !",
        "Tr√®s bonne exp√©rience d'achat. Le site est facile √† naviguer, et j'ai trouv√© exactement ce que je cherchais. Le produit est conforme √† la description et la qualit√© est au rendez-vous. Je reviendrai pour mes prochains achats.",
        "Extr√™mement d√©√ßu par cette commande. Le produit que j'ai re√ßu √©tait endommag√© et la qualit√© laissait vraiment √† d√©sirer. De plus, le service client a mis beaucoup de temps √† r√©pondre √† mes plaintes. Je ne recommande pas cette marketplace.",
        "Service apr√®s-vente inexistant. J'ai eu un probl√®me avec ma commande, mais impossible de contacter qui que ce soit pour r√©soudre mon probl√®me. C'est dommage, car la marketplace semblait prometteuse au d√©but.",
        "Exp√©rience d'achat correcte, sans plus. Le produit est arriv√© √† temps et correspondait √† la description. Toutefois, l'emballage aurait pu √™tre un peu plus soign√©. Pas de gros soucis, mais pas d'enthousiasme non plus.",
        "Rien de particulier √† signaler. La commande est arriv√©e dans les d√©lais, mais la qualit√© du produit est juste moyenne. C'est acceptable pour le prix, mais je ne suis ni particuli√®rement satisfait ni insatisfait."
    ]
}

# Convert to DataFrame
df = pd.DataFrame(data)
# Apply preprocessing
df['tokens'] = df['review_text'].apply(preprocess)

# Create a dictionary and corpus
dictionary = Dictionary(df['tokens'])
corpus = [dictionary.doc2bow(text) for text in df['tokens']]

# Train the LDA model
lda_model = LdaModel(corpus, num_topics=3, id2word=dictionary, passes=10)

# Function to extract topics
def get_topics(review):
    bow = dictionary.doc2bow(preprocess(review))
    topics = lda_model.get_document_topics(bow)
    topics = sorted(topics, key=lambda x: x[1], reverse=True)
    return topics[0][0] if topics else None